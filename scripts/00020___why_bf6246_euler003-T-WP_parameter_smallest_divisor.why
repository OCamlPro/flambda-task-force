(* this is a prelude for Alt-Ergo*)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic safe_comp_div: int, int -> int
axiom safe_comp_div_def: forall x, y:int. x >= 0 and y > 0 -> safe_comp_div(x,y) = x / y
logic safe_comp_mod: int, int -> int
axiom safe_comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> safe_comp_mod(x,y) = x % y
logic safe_eucl_div: int, int -> int
axiom safe_eucl_div_def: forall x, y:int. x >= 0 and y > 0 -> safe_eucl_div(x,y) = x / y
logic safe_eucl_mod: int, int -> int
axiom safe_eucl_mod_def: forall x, y:int. x >= 0 and y > 0 -> safe_eucl_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

type qtmark

axiom CompatOrderMult :
  (forall x:int. forall y:int. forall z:int. ((x <= y) -> ((0 <= z) ->
  ((x * z) <= (y * z)))))

logic abs : int -> int

axiom abs_def : (forall x:int. ((0 <= x) -> (abs(x) = x)))

axiom abs_def1 : (forall x:int. ((not (0 <= x)) -> (abs(x) = (-x))))

axiom Abs_le : (forall x:int. forall y:int. ((abs(x) <= y) -> ((-y) <= x)))

axiom Abs_le1 : (forall x:int. forall y:int. ((abs(x) <= y) -> (x <= y)))

axiom Abs_le2 :
  (forall x:int. forall y:int. ((((-y) <= x) and (x <= y)) -> (abs(x) <= y)))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * safe_comp_div(x,y)) + safe_comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= safe_comp_div(x,y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (safe_comp_div(x,y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  ((-abs(y)) <  safe_comp_mod(x,y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (safe_comp_mod(x,y) <  abs(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= safe_comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (safe_comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= safe_comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (safe_comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs((safe_comp_div(x,y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (safe_comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (safe_comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (safe_comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (safe_comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [safe_comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (safe_comp_div(((x * y) + z),x) = (y + safe_comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [safe_comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (safe_comp_mod(((x * y) + z),x) = safe_comp_mod(z,x))))

predicate divides(d: int, n: int) = (exists q:int. (n = (q * d)))

axiom divides_refl : (forall n:int. divides(n, n))

axiom divides_1_n : (forall n:int. divides(1, n))

axiom divides_0 : (forall n:int. divides(n, 0))

axiom divides_left :
  (forall a:int. forall b:int. forall c:int. (divides(a, b) ->
  divides((c * a), (c * b))))

axiom divides_right :
  (forall a:int. forall b:int. forall c:int. (divides(a, b) ->
  divides((a * c), (b * c))))

axiom divides_oppr :
  (forall a:int. forall b:int. (divides(a, b) -> divides(a, (-b))))

axiom divides_oppl :
  (forall a:int. forall b:int. (divides(a, b) -> divides((-a), b)))

axiom divides_oppr_rev :
  (forall a:int. forall b:int. (divides((-a), b) -> divides(a, b)))

axiom divides_oppl_rev :
  (forall a:int. forall b:int. (divides(a, (-b)) -> divides(a, b)))

axiom divides_plusr :
  (forall a:int. forall b:int. forall c:int. (divides(a, b) -> (divides(a,
  c) -> divides(a, (b + c)))))

axiom divides_minusr :
  (forall a:int. forall b:int. forall c:int. (divides(a, b) -> (divides(a,
  c) -> divides(a, (b - c)))))

axiom divides_multl :
  (forall a:int. forall b:int. forall c:int. (divides(a, b) -> divides(a,
  (c * b))))

axiom divides_multr :
  (forall a:int. forall b:int. forall c:int. (divides(a, b) -> divides(a,
  (b * c))))

axiom divides_factorl : (forall a:int. forall b:int. divides(a, (b * a)))

axiom divides_factorr : (forall a:int. forall b:int. divides(a, (a * b)))

axiom divides_n_1 :
  (forall n:int. (divides(n, 1) -> ((n = 1) or (n = (-1)))))

axiom divides_antisym :
  (forall a:int. forall b:int. (divides(a, b) -> (divides(b, a) ->
  ((a = b) or (a = (-b))))))

axiom divides_trans :
  (forall a:int. forall b:int. forall c:int. (divides(a, b) -> (divides(b,
  c) -> divides(a, c))))

axiom divides_bounds :
  (forall a:int. forall b:int. (divides(a, b) -> ((not (b = 0)) ->
  (abs(a) <= abs(b)))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * safe_eucl_div(x,y)) + safe_eucl_mod(x,y)))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= safe_eucl_div(x,y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (safe_eucl_div(x,y) <= x)))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= safe_eucl_mod(x,y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (safe_eucl_mod(x,y) <  abs(y))))

axiom Mod_11 : (forall x:int. (safe_eucl_mod(x,1) = 0))

axiom Div_11 : (forall x:int. (safe_eucl_div(x,1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (safe_eucl_div(x,y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (safe_eucl_div((-x),y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> (safe_eucl_mod(0,y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> (safe_eucl_div(1,y) = 0)))

axiom Div_minus1_left :
  (forall y:int. ((1 <  y) -> (safe_eucl_div((-1),y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> (safe_eucl_mod(1,y) = 1)))

axiom Mod_minus1_left :
  (forall y:int. ((1 <  y) -> (safe_eucl_mod((-1),y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [safe_eucl_div(((x * y) + z),x)].
  ((0 <  x) -> (safe_eucl_div(((x * y) + z),x) = (y + safe_eucl_div(z,x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [safe_eucl_mod(((x * y) + z),x)].
  ((0 <  x) -> (safe_eucl_mod(((x * y) + z),x) = safe_eucl_mod(z,x))))

axiom mod_divides_euclidean :
  (forall a:int. forall b:int. ((not (b = 0)) -> ((safe_eucl_mod(a,b) = 0) ->
  divides(b, a))))

axiom divides_mod_euclidean :
  (forall a:int. forall b:int. ((not (b = 0)) -> (divides(b, a) ->
  (safe_eucl_mod(a,b) = 0))))

axiom mod_divides_computer :
  (forall a:int. forall b:int. ((not (b = 0)) -> ((safe_comp_mod(a,b) = 0) ->
  divides(b, a))))

axiom divides_mod_computer :
  (forall a:int. forall b:int. ((not (b = 0)) -> (divides(b, a) ->
  (safe_comp_mod(a,b) = 0))))

predicate even(n: int) = (exists k:int. (n = (2 * k)))

predicate odd(n: int) = (exists k:int. (n = ((2 * k) + 1)))

axiom even_or_odd : (forall n:int. (even(n) or odd(n)))

axiom even_not_odd : (forall n:int. (even(n) -> (not odd(n))))

axiom odd_not_even : (forall n:int. (odd(n) -> (not even(n))))

axiom even_odd : (forall n:int. (even(n) -> odd((n + 1))))

axiom odd_even : (forall n:int. (odd(n) -> even((n + 1))))

axiom even_even : (forall n:int. (even(n) -> even((n + 2))))

axiom odd_odd : (forall n:int. (odd(n) -> odd((n + 2))))

axiom even_2k : (forall k:int. even((2 * k)))

axiom odd_2k1 : (forall k:int. odd(((2 * k) + 1)))

axiom even_divides : (forall a:int. (even(a) -> divides(2, a)))

axiom even_divides1 : (forall a:int. (divides(2, a) -> even(a)))

axiom odd_divides : (forall a:int. (odd(a) -> (not divides(2, a))))

axiom odd_divides1 : (forall a:int. ((not divides(2, a)) -> odd(a)))

predicate prime(p: int) = ((2 <= p) and
  (forall n:int. (((1 <  n) and (n <  p)) -> (not divides(n, p)))))

axiom not_prime_1 : (not prime(1))

axiom prime_2 : prime(2)

axiom prime_3 : prime(3)

axiom prime_divisors :
  (forall p:int. (prime(p) ->
  (forall d:int. (divides(d, p) -> ((d = 1) or ((d = (-1)) or ((d = p) or
  (d = (-p)))))))))

axiom small_divisors :
  (forall p:int. ((2 <= p) ->
  ((forall d:int. ((2 <= d) -> (prime(d) -> (((1 <  (d * d)) and
   ((d * d) <= p)) -> (not divides(d, p)))))) ->
  prime(p))))

axiom even_prime : (forall p:int. (prime(p) -> (even(p) -> (p = 2))))

axiom odd_prime : (forall p:int. (prime(p) -> ((3 <= p) -> odd(p))))

logic ac gcd : int, int -> int

axiom gcd_nonneg : (forall a:int. forall b:int. (0 <= gcd(a, b)))

axiom gcd_def1 : (forall a:int. forall b:int. divides(gcd(a, b), a))

axiom gcd_def2 : (forall a:int. forall b:int. divides(gcd(a, b), b))

axiom gcd_def3 :
  (forall a:int. forall b:int. forall x:int. (divides(x, a) -> (divides(x,
  b) -> divides(x, gcd(a, b)))))

axiom gcd_unique :
  (forall a:int. forall b:int. forall d:int. ((0 <= d) -> (divides(d, a) ->
  (divides(d, b) ->
  ((forall x:int. (divides(x, a) -> (divides(x, b) -> divides(x, d)))) ->
  (d = gcd(a, b)))))))

axiom gcd_0_pos : (forall a:int. ((0 <= a) -> (gcd(a, 0) = a)))

axiom gcd_0_neg : (forall a:int. ((a <  0) -> (gcd(a, 0) = (-a))))

axiom gcd_opp : (forall a:int. forall b:int. (gcd(a, b) = gcd((-a), b)))

axiom gcd_euclid :
  (forall a:int. forall b:int. forall q:int. (gcd(a, b) = gcd(a,
  (b - (q * a)))))

axiom Gcd_computer_mod :
  (forall a:int. forall b:int [gcd(b, safe_comp_mod(a,b))]. ((not (b = 0)) ->
  (gcd(b, safe_comp_mod(a,b)) = gcd(a, b))))

axiom Gcd_euclidean_mod :
  (forall a:int. forall b:int [gcd(b, safe_eucl_mod(a,b))]. ((not (b = 0)) ->
  (gcd(b, safe_eucl_mod(a,b)) = gcd(a, b))))

axiom gcd_mult :
  (forall a:int. forall b:int. forall c:int. ((0 <= c) -> (gcd((c * a),
  (c * b)) = (c * gcd(a, b)))))

predicate coprime(a: int, b: int) = (gcd(a, b) = 1)

axiom prime_coprime : (forall p:int. (prime(p) -> (2 <= p)))

axiom prime_coprime1 :
  (forall p:int. (prime(p) ->
  (forall n:int. (((1 <= n) and (n <  p)) -> coprime(n, p)))))

axiom prime_coprime2 :
  (forall p:int. (((2 <= p) and
  (forall n:int. (((1 <= n) and (n <  p)) -> coprime(n, p)))) -> prime(p)))

axiom Gauss :
  (forall a:int. forall b:int. forall c:int. ((divides(a, (b * c)) and
  coprime(a, b)) -> divides(a, c)))

axiom Euclid :
  (forall p:int. forall a:int. forall b:int. ((prime(p) and divides(p,
  (a * b))) -> (divides(p, a) or divides(p, b))))

goal WP_parameter_smallest_divisor :
  (forall d:int. forall n:int. (((2 <= n) and (((2 <= d) and (d <= n)) and
  (forall i:int. (((2 <= i) and (i <  d)) -> (not divides(i, n)))))) ->
  ((n <  (d * d)) ->
  (forall i:int. ((((2 <= i) and (i <  n)) and divides(i, n)) -> ((d <= i) ->
  (((safe_comp_div(n,i) * i) = n) -> (divides(safe_comp_div(n,i), n) ->
  (((safe_comp_div(n,i) * i) = n) -> (((d <= safe_comp_div(n,i)) ->
  ((((d * i) <= n) and ((d * d) <= (d * i))) and false)) ->
  (2 <= safe_comp_div(n,i))))))))))))
